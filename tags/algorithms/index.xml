<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on NOWHERESVILLE</title>
    <link>/tags/algorithms/</link>
    <description>Recent content in Algorithms on NOWHERESVILLE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Algorithms-Design and Analysis(Stanford) Notes</title>
      <link>/post/2018/01/25/algorithms/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/25/algorithms/</guid>
      <description>Divide and Conquer 分而治之 Master Method  Cool feature: a &amp;ldquo;black-box&amp;rdquo; method for solving recurrences
 Determine the upper bound of running time for most of the D&amp;amp;C algos
 Assumption: all sub-problems have equal size
    unbalanced sub-problems? more than one recurrence?    Recurrence format:
 base case: $T(n)\leq C$(a constant), for all sufficiently small $n$ for all larger $n$, $T(n)\leq aT(\frac{n}{b})+O(n^d)$ $a$: # of recurrence calls (e.</description>
    </item>
    
    <item>
      <title>Leetcode算法题目（不断更新）</title>
      <link>/post/2018/01/25/leetcode/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/25/leetcode/</guid>
      <description>Non-decreasing Array  Given an array with $n$ integers, your task is to check if it could become non-decreasing by modifying at most 1 element.
We define an array is non-decreasing if array[i] &amp;lt;= array[i + 1] holds for every i (1 &amp;lt;= i &amp;lt; n).
 思路:
使用for loop扫描数列,假如在下标idx, idx+1处不满足非递减关系,那么:
 要么 array[idx-1]&amp;lt;=array[idx+1],此时只要判断idx+1后都满足非递减关系即可 要么array[idx-1]&amp;gt;array[idx+1],此时只要用array[idx]代替array[idx+1],再判断idx+1后都满足非递减关系即可  class Solution: def checkPossibility(self, nums): &amp;quot;&amp;quot;&amp;quot; :type nums: List[int] :rtype: bool &amp;quot;&amp;quot;&amp;quot; idx = 0 for i in range(0,len(nums)-1): if nums[i] &amp;gt; nums[i+1]: idx = i break if idx &amp;gt; 0 and (nums[idx-1] &amp;gt; nums[idx+1]): nums[idx+1] = nums[idx] for j in range(idx+1, len(nums)-1): if nums[j] &amp;gt; nums[j+1]: return False else: return True  Leetcode运行结果:</description>
    </item>
    
    <item>
      <title>TwoSum in Python</title>
      <link>/post/2018/01/25/two-sum-in-python/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/25/two-sum-in-python/</guid>
      <description>方式一：Brute Force class Solution: def twoSum(self, nums, target): for idx1, element in enumerate(nums): try: idx2 = nums[idx1 + 1:].index(target - element) + idx1 + 1 except ValueError: continue return [idx1, idx2] return None   Time complexity: $O(n^2)$ Space complexity: $O(1)$ Leetcode Submission Detail:  Runtime: 1629 ms Beats 17.69% of python3 submissions   方式二：One-pass Hash Table class Solution: def twoSum(self, nums, target): numDict = {} for idx1, element in enumerate(nums): try: idx2 = numDict[target - element] except KeyError: numDict[element] = idx1 continue return [idx1, idx2] return None   Time complexity: $O(n)$ Space complexity: $O(n)$ Leetcode Submission Detail:  Runtime: 61 ms Beats 73.</description>
    </item>
    
    <item>
      <title>Max Subarray</title>
      <link>/post/2018/01/02/max-subarray/</link>
      <pubDate>Tue, 02 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/02/max-subarray/</guid>
      <description> Brute Force Divide and Conquer Non-recursive Linear Method </description>
    </item>
    
    <item>
      <title>Python练习题（不断更新）</title>
      <link>/post/2018/01/01/python-exercises/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/01/python-exercises/</guid>
      <description>基础 数据结构 算法 Greatest Common Divisor 最大公因数 Euclid&amp;rsquo;s algorithm:
def gcd(p, q): &#39;&#39;&#39;Compute the greatest common divisor of 2 nonnegative integers &#39;&#39;&#39; if q==0: return p else: return gcd(q, p%q)   Two integers $p,q\geq 0$,
(1) obviously, $gcd(p, 0)=p$
(2) $gcd(p,q)=gcd(q,r)$, where $r=p\%q$
Proof of statement (2):
Let $a=gcd(p,q)$ and $b=gcd(q,r)$, then $$ \left. \begin{align} a|p, a|q \Rightarrow a|r \Rightarrow a\leq gcd(q,r)=b\nonumber \newline b|q, b|r \Rightarrow b|p \Rightarrow b\leq gcd(p,q)=a \nonumber \end{align} \right\} \Rightarrow a=b $$ Proof of termination of Euclid&amp;rsquo;s algo:</description>
    </item>
    
    <item>
      <title>Sorting 排序算法</title>
      <link>/post/2018/01/01/sorting/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/01/sorting/</guid>
      <description> Insertion Sort Selection Sort Bubble Sort Merge Sort Quick Sort </description>
    </item>
    
  </channel>
</rss>