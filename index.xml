<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on NOWHERESVILLE</title>
    <link>/</link>
    <description>Recent content in Home on NOWHERESVILLE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Algorithms-Design and Analysis(Stanford) Notes</title>
      <link>/post/2018/01/25/algorithms/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/25/algorithms/</guid>
      <description>Divide and Conquer 分而治之 Master Method  Cool feature: a &amp;ldquo;black-box&amp;rdquo; method for solving recurrences
 Determine the upper bound of running time for most of the D&amp;amp;C algos
 Assumption: all sub-problems have equal size
    unbalanced sub-problems? more than one recurrence?    Recurrence format:
 base case: $T(n)\leq C$(a constant), for all sufficiently small $n$ for all larger $n$, $T(n)\leq aT(\frac{n}{b})+O(n^d)$ $a$: # of recurrence calls (e.</description>
    </item>
    
    <item>
      <title>Python Data Structures</title>
      <link>/post/2018/01/25/python-data-structure/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/25/python-data-structure/</guid>
      <description> Stack Queue Heap Tree </description>
    </item>
    
    <item>
      <title>TwoSum in Python</title>
      <link>/post/2018/01/25/two-sum-in-python/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/25/two-sum-in-python/</guid>
      <description>方式一：Brute Force class Solution: def twoSum(self, nums, target): for idx1, element in enumerate(nums): try: idx2 = nums[idx1 + 1:].index(target - element) + idx1 + 1 except ValueError: continue return [idx1, idx2] return None   Time complexity: $O(n^2)$ Space complexity: $O(1)$ Leetcode Submission Detail:  Runtime: 1629 ms Beats 17.69% of python3 submissions   方式二：One-pass Hash Table class Solution: def twoSum(self, nums, target): numDict = {} for idx1, element in enumerate(nums): try: idx2 = numDict[target - element] except KeyError: numDict[element] = idx1 continue return [idx1, idx2] return None   Time complexity: $O(n)$ Space complexity: $O(n)$ Leetcode Submission Detail:  Runtime: 61 ms Beats 73.</description>
    </item>
    
    <item>
      <title>Python中的取整方式</title>
      <link>/post/2018/01/19/python-float-to-int/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/19/python-float-to-int/</guid>
      <description>方式一：round() 四舍五入 Python中的 round() 有两个参数，第一个参数是需要处理的数，第二个参数是数位精度，默认为0。
round(3.4) ## 3 round(3.5) ## 4  而有时候会出现奇怪的情况，比如：
round(3.24, 1) #是四舍五入 ## 3.2 round(3.26, 1) #是四舍五入 ## 3.3 round(3.25, 1) #不是四舍五入 ## 3.2 ################################### round(0.44, 1) #是四舍五入 ## 0.4 round(0.46, 1) #是四舍五入 ## 0.5 round(0.45, 1) #是四舍五入 ## 0.5  很多人说Python3中采用的是【四舍六入五留双】，上面的例子说明这种说法是不正确的。其实是因为：
 十进制小数在计算机内是通过二进制小数来近似，在舍和进两个选项中选择更接近的一个 而当舍和进的两个选项十分接近时，round 选择偶数的选项  这就导致出现的结果非常复杂了。
进一步解释：十进制小数 $0.2$ 和 $0.3$ 的二进制表示分别为：
$$ \begin{align} (0.2)_{10} &amp;amp; = \left(\frac{1}{8}+\frac{1}{16}\right)+\left(\frac{1}{128}+\frac{1}{256}\right)+\cdots =\frac{\frac{1}{8}+\frac{1}{16}}{1-\frac{1}{16}} =\frac{3}{15}=\frac{1}{5}\newline &amp;amp;=(0.\dot{0}\dot{0}\dot{1}\dot{1})_2 \end{align} $$
以及 $$ \begin{align} (0.</description>
    </item>
    
    <item>
      <title>UC San Diego Big Data笔记</title>
      <link>/post/2018/01/11/big-data-notes/</link>
      <pubDate>Thu, 11 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/11/big-data-notes/</guid>
      <description>Introduction to Big Data Week1. Big Data: Why and Where Cloud Computing 云计算
 on-demand computing computing anywhere, anytime + data torrent =&amp;gt; dynamic and scalable data analysis  Big Data =&amp;gt; Better Models =&amp;gt; Higher Precision
 Personalized Marketing Personalized Medicine Smart Cities  Challenges of unstructured data:
 volume =&amp;gt; hadoop velocity: real-time processing
 high-velocity data: social media and market data =&amp;gt; storm, spark  beyond relational db =&amp;gt; NoSQL</description>
    </item>
    
    <item>
      <title>Python练习题（不断更新）</title>
      <link>/post/2018/01/01/python-exercises/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/01/python-exercises/</guid>
      <description>基础 数据结构 算法 Greatest Common Divisor 最大公因数 Euclid&amp;rsquo;s algorithm:
def gcd(p, q): &#39;&#39;&#39;Compute the greatest common divisor of 2 nonnegative integers &#39;&#39;&#39; if q==0: return p else: return gcd(q, p%q)   Two integers $p,q\geq 0$,
(1) obviously, $gcd(p, 0)=p$
(2) $gcd(p,q)=gcd(q,r)$, where $r=p\%q$
Proof of statement (2):
Let $a=gcd(p,q)$ and $b=gcd(q,r)$, then $$ \left. \begin{align} a|p, a|q \Rightarrow a|r \Rightarrow a\leq gcd(q,r)=b \newline b|q, b|r \Rightarrow b|p \Rightarrow b\leq gcd(p,q)=a</description>
    </item>
    
    <item>
      <title>Sorting 排序算法</title>
      <link>/post/2018/01/01/sorting/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/01/01/sorting/</guid>
      <description> Insertion Sort Selection Sort Bubble Sort Merge Sort Quick Sort </description>
    </item>
    
    <item>
      <title>PCA</title>
      <link>/post/2017/07/02/pca/</link>
      <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017/07/02/pca/</guid>
      <description>Applications of PCAData Visualizationsummary(iris)## Sepal.Length Sepal.Width Petal.Length Petal.Width ## Min. :4.300 Min. :2.000 Min. :1.000 Min. :0.100 ## 1st Qu.:5.100 1st Qu.:2.800 1st Qu.:1.600 1st Qu.:0.300 ## Median :5.800 Median :3.000 Median :4.350 Median :1.300 ## Mean :5.843 Mean :3.057 Mean :3.758 Mean :1.199 ## 3rd Qu.:6.400 3rd Qu.:3.300 3rd Qu.:5.100 3rd Qu.:1.800 ## Max. :7.900 Max. :4.400 Max. :6.900 Max. :2.500 ## Species ## setosa :50 ## versicolor:50 ## virginica :50 ## ## ## # Customize the colorssetcols = c(&amp;quot;#00AFBB&amp;quot;, &amp;quot;#E7B800&amp;quot;, &amp;quot;#FC4E07&amp;quot;)# Customize the lower panel: correlation efficientscorrelation.</description>
    </item>
    
  </channel>
</rss>